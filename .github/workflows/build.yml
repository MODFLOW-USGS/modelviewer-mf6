name: build

on:
  push:

env:
  # vtk version
  VTK_VERSION: 6.0.0

  # releases api
  RELEASES_URL: ${{github.api_url}}/repos/${{github.repository}}/releases

jobs:
  build:
    runs-on: windows-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Cache vtk
      id: cache-vtk
      uses: actions/cache@v2
      with:
        path: |
          C:\VTK6.0.0
          C:\VTK6.0.0_build64
        key: ${{runner.os}}-vtk-${{env.VTK_VERSION}}

    - name: Download and install vtk
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        pip install gdown
        gdown https://drive.google.com/uc?id=1FHn0dSghDXuVt3OvxrxtJP4KYtLap9be
        7z x -oC:\ vtk6.zip
        Remove-Item vtk6.zip

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: x64
        vs-version: '[16.9,17)'

    - name: Build modelviewer
      run: msbuild MvProject.sln -property:Platform=x64 -property:Configuration=Release

    - name: Install htmlhelp
      run: |
        curl -L -O http://web.archive.org/web/20160201063255/http://download.microsoft.com/download/0/A/9/0A939EF6-E31C-430F-A3DF-DFAE7960D564/htmlhelp.exe
        cmd /c start /wait .\htmlhelp.exe /q /c /t:$(Get-Location)\tmp
        $file = "$(Get-Location)\tmp\htmlhelp.inf"
        (Get-Content $file) | Foreach-Object { $_ `
          -replace '^BeginPrompt',                                               ';;BeginPrompt' `
          -replace '^EndPrompt',                                                 ';;EndPrompt' `
          -replace '^49000=CustomLDID49000, 1',                                  '49000=CustomLDID49000, 5' `
          -replace '^"hhupd.exe',                                                ';;hhupd.exe' `
          -replace '^DefaultInstallDir="C:\\Program Files\\HTML Help Workshop"', 'DefaultInstallDir="%ProgramFiles%\\HTML Help Workshop"'
        } | Set-Content $file
        cmd /c start /wait .\tmp\setup.exe
        Remove-Item -Recurse -Force .\tmp
        Remove-Item -Recurse -Force .\htmlhelp.exe
        # the next line doesn't seem to work (supposed to set the path)
        # echo 'C:\Program Files (x86)\HTML Help Workshop' >> $GITHUB_PATH

    - name: Compile chm
      shell: bash
      run: |
        pushd Help
        # hhc returns 1 on success
        set +e
        'C:\Program Files (x86)\HTML Help Workshop\hhc' mvmf6.hhp | tee mvmf6.out
        status=${PIPESTATUS[0]}
        set -e
        if [ "$status" -eq 1 ]; then
          echo "[OK]"
          exit 0
        else
          echo "[FAILED]"
          exit 1
        fi
        popd

    - name: Build mvmf6.zip
      run: |
        mkdir mvmf6
        mkdir mvmf6\bin
        Push-Location mvmf6\bin
        Copy-Item ..\..\ModelViewer\x64\Release\mvmf6.exe .
        Copy-Item ..\..\mv\x64\Release\mv.dll .
        Copy-Item ..\..\Help\mvmf6.chm .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkalglib-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkCommonComputationalGeometry-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkCommonCore-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkCommonDataModel-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkCommonExecutionModel-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkCommonMath-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkCommonMisc-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkCommonSystem-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkCommonTransforms-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkDICOMParser-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkexpat-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkFiltersCore-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkFiltersExtraction-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkFiltersGeneral-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkFiltersGeometry-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkFiltersModeling-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkFiltersSources-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkFiltersStatistics-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkfreetype-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkftgl-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkImagingCore-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkImagingFourier-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkImagingHybrid-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkInteractionStyle-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkIOCore-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkIOImage-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkIOXMLParser-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkjpeg-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkmetaio-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkpng-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkRenderingCore-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkRenderingFreeType-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkRenderingFreeTypeOpenGL-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkRenderingLOD-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkRenderingOpenGL-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtksys-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtktiff-6.0.dll .
        Copy-Item C:\VTK6.0.0_build64\bin\Release\vtkzlib-6.0.dll .
        Pop-Location
        7z a mvmf6.7z .\mvmf6\

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        path: mvmf6


    - name: Export next mvmf6 version
      run: |
        # create headers dictionary
        $h = @{"Authorization" = "token ${{secrets.GITHUB_TOKEN}}"}

        try {
            $response = Invoke-WebRequest -Uri ${{env.RELEASES_URL}}/latest -Headers $h -Method GET
            $json = $response.Content | ConvertFrom-Json
            $tag_name = $json.tag_name
        }
        catch {
            # none so far
            $tag_name = "v0.0"
        }

        $next_tag_name = "v0.0.0"
        if ($tag_name -match '^v(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)(?:\.(?<patch>0|[1-9]\d*))?$') {
            if ($Matches.ContainsKey('patch')) {
              $patch = 1 + $Matches['patch']
            }
            else {
              $patch = 0
            }
            $next_tag_name = "v" + $Matches['major'] + "." + $Matches['minor'] + "." + $patch
        }
        Write-Output "NEXT_TAG_NAME=$next_tag_name" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Create release
      run: |
        # store new commit
        $target_commitish = (git log -n1 --format=format:"%H")

        if (! ($env:NEXT_TAG_NAME -match "^v(?<major>0|[1-9]\d*)\.(?<minor>[0|1-9]\d*)\.(?<patch>[0|1-9]\d*)$") ) {
          throw "Bad version"
        }
        $version = $Matches['major'] + "." + $Matches['minor'] + "." + $Matches['patch']

        # create headers dictionary
        $h = @{"Authorization" = "token ${{secrets.GITHUB_TOKEN}}"}

        $releases_url = "${{env.releases_url}}"

        # create release
        # POST /repos/{owner}/{repo}/releases
        # see https://docs.github.com/en/rest/reference/repos#create-a-release
        #
        $create = @{
          "tag_name"         = "$env:NEXT_TAG_NAME"
          "target_commitish" = "$target_commitish"
          "name"             = "mvmf6 " + $version
          "draft"            = $true
          "prerelease"       = $true
        }
        $create_json = $create | ConvertTo-Json
        $release = Invoke-WebRequest -Uri $releases_url -Headers $h -Method POST -Body $create_json

        # upload artifact (asset)
        # POST /repos/{owner}/{repo}/releases/{release_id}/assets
        # see https://docs.github.com/en/rest/reference/repos#upload-a-release-asset
        #
        $upload_uri = ($release.Content | ConvertFrom-Json).upload_url
        if (! ($upload_uri -match  "(.*)\{\?name,label\}") ) {
          # expecting URI{?name,label}
          # ie https://uploads.github.com/repos/MODFLOW-USGS/modelviewer-mf6/releases/24058628/assets{?name,label}
          throw "Bad upload_url"
        }
        $upload_uri = $Matches[1] + "?name=mvmf6-$version.7z"
        $h["Content-type"] = "application/x-7z-compressed"
        $bytes = [System.IO.File]::ReadAllBytes("mvmf6.7z")
        $upload = Invoke-WebRequest -Uri $upload_uri -Headers $h -Method POST -Body $bytes

        # update release
        # PATCH /repos/{owner}/{repo}/releases/{release_id}
        # see https://docs.github.com/en/rest/reference/repos#update-a-release
        #
        $release_id = ($release.Content | ConvertFrom-Json).id
        $h.Remove("Content-type")
        $update = @{ "draft" = $false }
        $update_json = $update | ConvertTo-Json
        $release = Invoke-WebRequest -Uri "$releases_url/$release_id" -Headers $h -Method PATCH -Body $update_json

        # display download url
        Write-Output "$((($release.Content | ConvertFrom-Json).assets).browser_download_url)"
        Get-FileHash "mvmf6.7z"
        Remove-Item mvmf6.7z
